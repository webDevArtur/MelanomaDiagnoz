import cv2
import numpy as np
from tkinter import Tk, Button, filedialog, Label, Frame
from PIL import ImageTk, Image
import mahotas.features
from sklearn.ensemble import RandomForestClassifier


image_path = ''
melanoma_perimeter = 0
melanoma_area = 0
contour_color = (0, 0, 255)  # Цвет контура (красный)
fill_color = (255, 0, 0)  # Цвет заливки (синий)
scale_factor = 2.0  # Множитель масштабирования
area_to_perimeter_ratio = 0.0  # Отношение площади к периметру
perimeter_to_area_ratio = 0.0  # Отношение периметра к площади
melanoma_contrast = 0.0  # Контраст на меланоме
average_brightness = 0.0  # Задайте значение по умолчанию или присвойте переменной другое значение
homogeneity = 0.0  # Задайте значение по умолчанию или присвойте переменной другое значение
melanoma_energy = 0.0  # Энергия меланомы
melanoma_entropy = 0.0  # Энтропия меланомы
melanoma_contour = None
contrast_image = None


def calculate_melanoma_perimeter():
    global image_path, melanoma_perimeter, melanoma_area, area_to_perimeter_ratio, perimeter_to_area_ratio, melanoma_contour

    if image_path:
        # Загрузка изображения
        image = cv2.imread(image_path)
        # Преобразование изображения в оттенки серого
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # Улучшение контраста
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        enhanced_gray = clahe.apply(gray)

        # Применение фильтрации для удаления шума или других элементов
        blurred = cv2.GaussianBlur(enhanced_gray, (5, 5), 0)
        # Бинаризация изображения
        _, threshold = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        # Применение алгоритма выделения краев (например, Laplacian)
        edges = cv2.Laplacian(threshold, 0)

        # Нахождение контуров объектов на изображении
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if len(contours) > 0:
            # Выделение контура меланомы
            melanoma_contour = max(contours, key=cv2.contourArea)

            # Вычисление периметра контура меланомы
            melanoma_perimeter = cv2.arcLength(melanoma_contour, True)

            # Вычисление площади контура меланомы
            melanoma_area = cv2.contourArea(melanoma_contour)

            # Вычисление отношения площади к периметру
            area_to_perimeter_ratio = melanoma_area / melanoma_perimeter

            # Вычисление отношения периметра к площади
            perimeter_to_area_ratio = melanoma_perimeter / melanoma_area

            # Создание чистого изображения для выделенной меланомы
            melanoma_image_blank = np.zeros_like(image)

            # Отрисовка контура меланомы на чистом изображении
            cv2.drawContours(melanoma_image_blank, [melanoma_contour], -1, contour_color, 2)
            cv2.fillPoly(melanoma_image_blank, [melanoma_contour], fill_color)

            # Масштабирование изображения
            melanoma_pil = Image.fromarray(cv2.cvtColor(melanoma_image_blank, cv2.COLOR_BGR2RGB))
            scaled_image = melanoma_pil.resize((int(melanoma_pil.width * scale_factor), int(melanoma_pil.height * scale_factor)))

            # Преобразование изображения в формат PIL
            melanoma_resized = scaled_image.resize((400, 400), resample=Image.BICUBIC)
            melanoma_image = ImageTk.PhotoImage(melanoma_resized)

            # Обновление отображаемого изображения меланомы
            melanoma_label.configure(image=melanoma_image)
            melanoma_label.image = melanoma_image
        else:
            # Очистка отображаемого изображения меланомы, если контур не найден
            melanoma_label.configure(image='')
            melanoma_label.image = None

        # Обновление отображения отношения периметра и площади
        ratio_label.configure(text=f'Отношение площади к периметру: {area_to_perimeter_ratio:.2f}')
        perimeter_to_area_ratio_label.configure(text=f'Отношение периметра к площади: {perimeter_to_area_ratio:.3f}')


def calculate_melanoma_contrast():
    global image_path, melanoma_contrast, contrast_image

    if image_path:
        # Загрузка изображения
        image = cv2.imread(image_path)
        # Преобразование изображения в оттенки серого
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        if melanoma_contour is not None:
            # Создание чистого изображения для выделенной меланомы
            melanoma_image_blank = np.zeros_like(image)
            # Отрисовка контура меланомы на чистом изображении
            cv2.drawContours(melanoma_image_blank, [melanoma_contour], -1, contour_color, 2)
            cv2.fillPoly(melanoma_image_blank, [melanoma_contour], fill_color)

            # Применение маски меланомы на серое изображение
            masked_gray = cv2.bitwise_and(gray, gray, mask=cv2.cvtColor(melanoma_image_blank, cv2.COLOR_BGR2GRAY))

            # Масштабирование изображения по размеру 400x400
            scaled_image = cv2.resize(masked_gray, (400, 400))

            # Вычисление контраста на меланоме
            melanoma_contrast = np.std(scaled_image)

            # Обновление отображения контраста
            contrast_label.configure(text=f'Контраст новообразования: {melanoma_contrast:.2f}')

            # Преобразование масштабированного изображения в формат PIL
            contrast_image = ImageTk.PhotoImage(Image.fromarray(cv2.cvtColor(scaled_image, cv2.COLOR_GRAY2RGB)))
            contrast_image_label.configure(image=contrast_image)
            contrast_image_label.image = contrast_image
        else:
            # Очистка контраста и изображения, если контур не найден
            melanoma_contrast = 0.0
            contrast_label.configure(text='Контраст новообразования: -')
            contrast_image_label.configure(image='')
            contrast_image_label.image = None


def select_image():
    global image_path, melanoma_contour
    # Открытие диалогового окна для выбора изображения
    image_path = filedialog.askopenfilename()

    if image_path:
        # Преобразование изображения в формат PIL
        image_pil = Image.open(image_path)

        # Изменение размера для отображения в окне
        image_resized = image_pil.resize((400, 400), resample=Image.BICUBIC)
        melanoma_image = ImageTk.PhotoImage(image_resized)

        # Отображение выбранного изображения меланомы
        image_label.configure(image=melanoma_image)
        image_label.image = melanoma_image

        # Очистка предыдущих значений периметра и площади
        global melanoma_perimeter, melanoma_area, melanoma_contour, contrast_image
        melanoma_perimeter = 0
        melanoma_area = 0
        melanoma_contour = None
        contrast_image = None


def calculate_average_color():
    global image_path, melanoma_contour, average_brightness

    if image_path and melanoma_contour is not None:
        # Загрузка изображения в оттенках серого
        gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        # Создание чистого изображения для выделенной меланомы
        melanoma_image_blank = np.zeros_like(gray_image, dtype=np.uint8)

        # Создание маски для контура меланомы
        mask = np.zeros(gray_image.shape, dtype=np.uint8)
        cv2.drawContours(mask, [melanoma_contour], -1, 255, thickness=cv2.FILLED)

        # Применение маски меланомы на чистом изображении в оттенках серого
        masked_image = cv2.bitwise_or(melanoma_image_blank, gray_image, mask=mask)

        # Вычисление среднего значения яркости внутри контура меланомы
        average_brightness = np.mean(masked_image)

        # Обновление метки среднего значения яркости
        average_color_label.configure(text=f'Средняя яркость новообразования: {average_brightness:.2f}')
    else:
        average_color_label.configure(text='Контур новообразования не найден.')


def calculate_homogeneity():
    global image_path, melanoma_contour, homogeneity

    if image_path and melanoma_contour is not None:
        # Загрузка изображения в оттенках серого
        gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        # Создание чистого изображения для выделенной меланомы
        melanoma_image_blank = np.zeros_like(gray_image, dtype=np.uint8)

        # Создание маски для контура меланомы
        mask = np.zeros(gray_image.shape, dtype=np.uint8)
        cv2.drawContours(mask, [melanoma_contour], -1, 255, thickness=cv2.FILLED)

        # Применение маски меланомы на чистом изображении в оттенках серого
        masked_image = cv2.bitwise_or(melanoma_image_blank, gray_image, mask=mask)

        # Вычисление Haralick texture features
        texture_features = mahotas.features.haralick(masked_image)

        # Вычисление однородности на меланоме (используя конкретный Haralick texture feature, например, "homogeneity")
        homogeneity = texture_features.mean(axis=0)[0]

        # Обновление метки однородности (схожая яркость)
        homogeneity_label.configure(text=f'Однородность новообразования: {homogeneity:.2f}')
    else:
        homogeneity_label.configure(text='Контур новообразования не найден.')


def calculate_melanoma_energy():
    global image_path, melanoma_energy, melanoma_contour

    if image_path and melanoma_contour is not None:
        # Загрузка изображения в оттенках серого
        gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        # Создание чистого изображения для выделенной меланомы
        melanoma_image_blank = np.zeros_like(gray_image, dtype=np.uint8)

        # Создание маски для контура меланомы
        mask = np.zeros(gray_image.shape, dtype=np.uint8)
        cv2.drawContours(mask, [melanoma_contour], -1, 255, thickness=cv2.FILLED)

        # Применение маски меланомы на чистом изображении в оттенках серого
        masked_image = cv2.bitwise_or(melanoma_image_blank, gray_image, mask=mask)

        # Вычисление Haralick texture features
        texture_features = mahotas.features.haralick(masked_image)

        # Вычисление энергии на меланоме (используя конкретный Haralick texture feature, например, "energy")
        energy = texture_features.mean(axis=0)[1]

        # Обновление метки энергии (мера разнообразия яркостей)
        energy_label.configure(text=f'Энергия новообразования: {energy:.2f}')
    else:
        energy_label.configure(text='Контур новообразования не найден.')


def calculate_melanoma_entropy():
    global image_path, melanoma_entropy, melanoma_contour

    if image_path and melanoma_contour is not None:
        # Загрузка изображения в оттенках серого
        gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        # Создание чистого изображения для выделенной меланомы
        melanoma_image_blank = np.zeros_like(gray_image, dtype=np.uint8)

        # Создание маски для контура меланомы
        mask = np.zeros(gray_image.shape, dtype=np.uint8)
        cv2.drawContours(mask, [melanoma_contour], -1, 255, thickness=cv2.FILLED)

        # Применение маски меланомы на чистом изображении в оттенках серого
        masked_image = cv2.bitwise_or(melanoma_image_blank, gray_image, mask=mask)

        # Вычисление Haralick texture features
        texture_features = mahotas.features.haralick(masked_image)

        # Вычисление энтропии на меланоме (используя конкретный Haralick texture feature, например, "entropy")
        entropy = texture_features.mean(axis=0)[8]

        # Обновление метки энтропии
        entropy_label.configure(text=f'Текстурная энтропия новообразования: {entropy:.2f}')
    else:
        entropy_label.configure(text='Контур новообразования не найден.')



def classify_parameters():
    # Получение сохраненных значений параметров из меток
    ratio_text = ratio_label.cget("text")
    perimeter_ratio_text = perimeter_to_area_ratio_label.cget("text")
    contrast_text = contrast_label.cget("text")
    average_color_text = average_color_label.cget("text")
    homogeneity_text = homogeneity_label.cget("text")
    energy_text = energy_label.cget("text")
    entropy_text = entropy_label.cget("text")

    # Извлечение значений параметров из текста меток
    ratio = float(ratio_text.split(": ")[1])
    perimeter_ratio = float(perimeter_ratio_text.split(": ")[1])
    contrast = float(contrast_text.split(": ")[1])
    average_color = float(average_color_text.split(": ")[1])
    homogeneity = float(homogeneity_text.split(": ")[1])
    energy = float(energy_text.split(": ")[1])
    entropy = float(entropy_text.split(": ")[1])

    # Формирование списка параметров
    parameters = [[ratio, perimeter_ratio, contrast, average_color, homogeneity, energy, entropy]]

    result = classifier.predict(parameters)
    result_label.configure(text=f"Предположительный диагноз: {result[0]}")


# Создание и обучение модели случайного леса
X = [
    [86.71, 0.012, 27.76, 12.39, 0.6, 39.51, 2.95],
    [69.48, 0.014, 22.75, 7.52, 0.78, 14.67, 1.64],
    [129.23, 0.008, 42.09, 24.42, 0.5, 41.09, 4.1],
    [42.19, 0.024, 32.19, 11.48, 0.76, 38, 1.91],
    [155.74, 0.006, 38.8, 24.04, 0.5, 27.88, 3.76],
    [64.18, 0.016, 54.99, 31.61, 0.55, 69.92, 3.41],
    [49.28, 0.02, 31.99, 12.9, 0.71, 35.16, 2.26],
    [45.12, 0.022, 16.16, 3.65, 0.88, 10.04, 0.92],
    [51.66, 0.019, 32, 13.11, 0.7, 32.53, 2.36],
    [101.29, 0.01, 61.09, 37.13, 0.52, 48.04, 3.55],
    [172.74, 0.006, 39.23, 29.31, 0.32, 54.79, 5.76],
    [93.57, 0.011, 36.79, 20.13, 0.55, 39.38, 3.57],
    [39.73, 0.025, 32.25, 13.58, 0.57, 79.41, 3.2],
    [33.4, 0.03, 26.67, 9.44, 0.69, 52.26, 2.37],
    [38.56, 0.026, 18.06, 4.2, 0.81, 31.66, 1.46],
    [50.01, 0.02, 34.42, 19.38, 0.5, 67.25, 3.85],
    [36.64, 0.027, 33.55, 11.06, 0.8, 41.55, 1.57],
    [61.81, 0.016, 39.64, 17.28, 0.64, 39.1, 2.78],
    [29.22, 0.034, 44.36, 21.53, 0.63, 94.63, 2.81],
    [32.29, 0.031, 39.95, 17.91, 0.67, 61.68, 2.42],
    [54.03, 0.019, 28.96, 12.83, 0.66, 35.27, 2.61],
    [20.4, 0.049, 30.57, 11.85, 0.73, 54.96, 2.03],
    [27.98, 0.036, 17.98, 5.66, 0.77, 24.02, 1.75],
    [153.2, 0.007, 56.25, 45.73, 0.35, 45.23, 4.68],
    [25.89, 0.039, 40.64, 17.95, 0.66, 86.11, 2.67],
    [23.74, 0.042, 56.97, 34.84, 0.5, 193.63, 3.99],
    [45.38, 0.022, 42.96, 26.51, 0.48, 89.18, 4.24],
    [47.99, 0.021, 33.81, 25.61, 0.35, 74.5, 5.04],
    [140.83, 0.007, 27.71, 13.37, 0.55, 26.37, 3.39],
    [24.58, 0.041, 33.04, 10.36, 0.81, 56.35, 1.59],
    [29.73, 0.034, 42.41, 20.34, 0.64, 79.84, 2.75],
    [49.12, 0.02, 29.45, 12.8, 0.66, 33.25, 2.7],
    [94.38, 0.011, 46.07, 27.83, 0.49, 53.81, 4.14],
    [68.83, 0.015, 62.1, 45.67, 0.38, 109.02, 5.35],
    [35.99, 0.028, 25.16, 6.7, 0.86, 20.55, 1.08],
    [36.41, 0.027, 40.12, 23.33, 0.38, 147.34, 5.28],
    [20.89, 0.048, 61.62, 32.81, 0.58, 236.86, 3.4],
    [25.24, 0.04, 51.24, 26.34, 0.54, 210.01, 3.94],
    [27.69, 0.036, 42.85, 17.11, 0.71, 98.64, 2.31],
    [40.7, 0.025, 17.62, 5.41, 0.8, 16.64, 1.51],
    [41.43, 0.024, 68.87, 52.82, 0.38, 177.99, 4.53],
    [37.96, 0.026, 24.6, 7.28, 0.81, 45.1, 1.65],
    [27.05, 0.037, 20.27, 6.21, 0.81, 30.12, 1.57],
    [32.62, 0.031, 24.76, 8.93, 0.76, 34.09, 1.9],
    [26.27, 0.038, 51.11, 20.62, 0.72, 127.44, 2.32],
    [49.01, 0.02, 45.77, 26.73, 0.51, 114.31, 4.04],
    [203.91, 0.005, 14.58, 4.55, 0.71, 6.16, 1.95],
    [210.15, 0.005, 15.46, 5.69, 0.71, 4.05, 2.05],
    [251.36, 0.004, 43.03, 32.63, 0.36, 22.16, 4.69],
    [38.77, 0.026, 19.79, 7.35, 0.72, 32, 2.2],
    [41.59, 0.024, 47.15, 25.72, 0.57, 90.55, 3.34],
    [60.73, 0.016, 49.82, 52.71, 0.18, 142.66, 7.19],
    [70.55, 0.014, 54.87, 27.51, 0.58, 64.68, 3.37],
    [50.58, 0.02, 38.51, 24.69, 0.47, 75.51, 4.37],
    [266.36, 0.004, 23.55, 15.81, 0.38, 8.02, 4.27],
    [76.94, 0.013, 15.74, 4.39, 0.84, 6.31, 1.18],
    [73.69, 0.014, 49.21, 32.89, 0.44, 56.79, 4.28],
    [57.33, 0.017, 35.67, 14.97, 0.69, 52.71, 2.58],
    [45.71, 0.022, 27.79, 9.21, 0.78, 32.52, 1.72],
    [192.55, 0.005, 48.91, 22.42, 0.64, 22.68, 2.72],
    [169.93, 0.006, 13.79, 3.68, 0.82, 3.9, 1.28],
    [169.55, 0.006, 25.64, 8.14, 0.79, 9.47, 1.61],
    [59.97, 0.017, 2.77, 6.55, 0.84, 12.47, 1.23],
    [130.82, 0.008, 28.69, 13.36, 0.61, 15.71, 2.96],
    [39.89, 0.025, 62.47, 30.92, 0.62, 138.68, 2.9],
    [57.59, 0.017, 33.05, 14.11, 0.69, 39.15, 2.42],
    [39.27, 0.025, 41.76, 18.96, 0.66, 73.44, 2.67],
    [65.08, 0.015, 42.59, 21.3, 0.62, 58.17, 3.15],
    [67.99, 0.015, 49.91, 28.6, 0.55, 59.7, 3.4],
    [36.29, 0.028, 46.95, 21.07, 0.66, 99.43, 2.77],
    [77.64, 0.013, 38.10, 18.4, 0.61, 32.48, 2.89],
    [66.44, 0.015, 20.72, 5.97, 0.83, 10.3, 1.3],
    [34.23, 0.029, 48.01, 19.63, 0.7, 97.4, 2.55],
    [36.66, 0.027, 40.30, 21.44, 0.58, 68.03, 3.13],
    [30.39, 0.033, 47.43, 18.58, 0.74, 84.87, 2],
    [27.98, 0.036, 48.81, 31.47, 0.48, 123.64, 3.95],
    [25.26, 0.040, 42.45, 19.4, 0.66, 89.37, 2.67],
    [22.90, 0.044, 51.21, 19.07, 0.74, 154.57, 2.25],
    [25.69, 0.039, 39.03, 13.13, 0.79, 66.4, 1.68],
    [22.03, 0.045, 44.55, 14.52, 0.8, 92.75, 1.57],
    [47.83, 0.021, 67.30, 38.15, 0.56, 124.55, 3.49],
    [58.83, 0.017, 37.28, 14.46, 0.76, 30.23, 1.92],
    [22.93, 0.044, 50.84, 21.63, 0.7, 110.56, 2.08],
    [35.20, 0.028, 34.84, 11.43, 0.8, 42.32, 1.51],
    [87.41, 0.011, 20.95, 7.16, 0.77, 9.36, 1.7],
    [20.15, 0.050, 51.20, 24.4, 0.64, 137.45, 2.71],
    [40.09, 0.025, 50.38, 22.5, 0.68, 73.24, 2.47],
    [19.14, 0.052, 34.02, 9.62, 0.85, 57.42, 1.15],
    [26.67, 0.037, 34.18, 10.87, 0.81, 43.18, 1.39],
    [48.80, 0.020, 27.40, 6.58, 0.89, 16.51, 0.83],
    [30.94, 0.032, 30.49, 9.51, 0.82, 37.31, 1.41],
    [30.61, 0.033, 54.68, 22.35, 0.72, 95.97, 1.89],
    [20.98, 0.048, 20.96, 4.39, 0.9, 26.93, 0.8],
    [28.36, 0.035, 36.02, 9.93, 0.85, 46.4, 1.15],
    [34.07, 0.029, 19.19, 3.32, 0.93, 20.01, 0.65],
    [67.36, 0.015, 52.05, 23, 0.69, 43.95, 2.06],
    [66.23, 0.015, 13.11, 2.58, 0.91, 5.46, 0.73],
    [56.90, 0.018, 17.50, 2.86, 0.94, 6, 0.44],
    [79.34, 0.013, 12.69, 2.35, 0.93, 3.33, 0.55],
    [69.64, 0.014, 32.91, 12.56, 0.75, 23.51, 1.88],
    [134.38, 0.007, 12.81, 2.37, 0.89, 4.34, 0.88],
    [148.11, 0.007, 21.03, 6.2, 0.74, 10.83, 1.93],
    [151.5, 0.007, 12.03, 2.05, 0.9, 4.36, 0.8],
    [111.31, 0.009, 28.31, 11.59, 0.71, 13.32, 2.12],
    [113.85, 0.009, 25.53, 7.53, 0.83, 8.64, 1.29],
    [172.88, 0.006, 16.74, 5, 0.8, 5.17, 1.42],
    [137.55, 0.007, 22.65, 5.34, 0.85, 9.3, 1.19],
    [164.82, 0.006, 35.99, 12.88, 0.74, 16.32, 2.02],
    [163.05, 0.006, 32.49, 15.75, 0.62, 12.48, 2.68],
    [172.81, 0.006, 32.3, 13.39, 0.67, 15.82, 2.49],
    [192.32, 0.005, 19.55, 7.86, 0.69, 5.39, 2.16],
    [282.59, 0.004, 18.16, 6.29, 0.75, 3.81, 1.77],
    [204.54, 0.005, 17.6, 4.03, 0.86, 4.41, 1.09],
    [199.64, 0.005, 27.36, 11.33, 0.65, 11.74, 2.56],
    [182.02, 0.005, 14.88, 3.8, 0.8, 4.69, 1.42],
    [126.73, 0.008, 12.82, 2.94, 0.87, 3.67, 0.96],
    [202.32, 0.005, 23.75, 7.93, 0.79, 5.29, 1.44],
    [126.79, 0.008, 32.16, 10.56, 0.78, 15.89, 1.73],
    [111.68, 0.009, 29.54, 9.59, 0.79, 14.59, 1.6],
    [128.73, 0.008, 28.19, 8.28, 0.82, 12.84, 1.44],
    [189.98, 0.005, 14.3, 2.79, 0.87, 4.55, 0.99],
    [241.83, 0.004, 14.21, 3.91, 0.77, 5.25, 1.73],
    [140.04, 0.007, 25.91, 8.4, 0.79, 8.84, 1.53],
    [313.52, 0.003, 19.36, 7.56, 0.71, 3.79, 1.98],
    [221.48, 0.005, 45.03, 23.13, 0.6, 17.16, 3.01],
    [132.75, 0.008, 44.85, 28.26, 0.45, 36.15, 4.27],
    [127.8, 0.008, 36.16, 25.61, 0.36, 33.19, 4.9],
    [101, 0.01, 33.3, 13.49, 0.69, 21.26, 2.3],
    [117.93, 0.008, 45.54, 32.08, 0.39, 40.61, 4.57],
    [293.78, 0.003, 35.32, 23.87, 0.44, 10.82, 3.95],
    [63.26, 0.016, 26.48, 12.22, 0.65, 29.26, 2.27],
    [50.98, 0.02, 26.93, 13.34, 0.54, 56, 3.46],
    [55.04, 0.018, 28.79, 16.01, 0.54, 40.48, 3.42],
    [83.06, 0.012, 43.43, 29.68, 0.37, 81.31, 4.94],
    [69.96, 0.014, 29.95, 12.88, 0.67, 33.25, 2.38],
    [103.79, 0.01, 36.64, 22.63, 0.47, 52.82, 3.78],
    [26.71, 0.037, 24.62, 7.38, 0.78, 43.6, 1.74],
    [55.67, 0.018, 52.58, 38.13, 0.39, 110.18, 4.76],
    [63.49, 0.016, 18.73, 5.75, 0.73, 25.38, 1.97],
    [43.3, 0.023, 62.41, 38.04, 0.51, 128.48, 3.47],
    [35.1, 0.028, 63.24, 39.56, 0.48, 192.23, 4.3],
    [38.81, 0.026, 37, 17.96, 0.62, 57.12, 2.79],
    [38.45, 0.026, 69.19, 30.68, 0.69, 131.2, 2.14],
    [42.92, 0.023, 38.81, 22.33, 0.51, 79.96, 3.89],
    [43.48, 0.023, 34.08, 15.68, 0.66, 40.08, 2.54],
    [40.85, 0.024, 71.25, 51.34, 0.4, 220.76, 4.8],
    [39.58, 0.025, 65.14, 38.85, 0.53, 123.5, 3.01],
    [26.65, 0.038, 26.12, 5.84, 0.9, 31.5, 0.85],
    [42.12, 0.024, 41.27, 16.74, 0.72, 61.26, 2.26],
    [38.94, 0.026, 55.03, 31.79, 0.55, 102.16, 3.2],
    [55.25, 0.018, 38.9, 21.42, 0.56, 51.01, 3.13],
    [81.59, 0.012, 53.16, 32.64, 0.51, 72.64, 3.62],
    [34.52, 0.029, 40.82, 15.3, 0.75, 62.75, 1.97],
    [60.29, 0.017, 37.19, 18.78, 0.59, 48.02, 3.08],
    [55.58, 0.018, 48.08, 28.35, 0.51, 84.11, 3.79],
    [33.4, 0.03, 67.74, 54.65, 0.35, 235.31, 5.11],
    [47.19, 0.021, 48.42, 44.31, 0.24, 158.19, 6.49],
    [38.88, 0.026, 23.67, 10.74, 0.63, 34.84, 2.79],
    [92.13, 0.011, 40.19, 29.32, 0.35, 65.8, 5.22],
    [75.35, 0.014, 47.45, 31.31, 0.44, 88.76, 4.57],
    [47.34, 0.021, 33.33, 9.82, 0.84, 33.6, 1.25],
    [47.79, 0.021, 21.81, 6.16, 0.81, 26.53, 1.48],
    [86.31, 0.012, 54.88, 47.73, 0.28, 110.59, 6],
    [38.36, 0.026, 18.55, 4.44, 0.85, 23.19, 1.19],
    [60.33, 0.017, 32.17, 12.94, 0.71, 40.53, 2.33],
    [48.96, 0.02, 44.49, 18.66, 0.71, 58.24, 2.25],
    [46.84, 0.021, 45.64, 17.91, 0.74, 55.79, 1.94],
    [55.4, 0.018, 29.97, 8.06, 0.84, 42.87, 1.41],
    [44.83, 0.022, 37.9, 22.69, 0.49, 83, 3.86],
    [34.03, 0.029, 24.77, 7.79, 0.8, 38.14, 1.61],
    [53.62, 0.019, 17.21, 3.12, 0.93, 7.58, 0.54],
    [59.7, 0.017, 20.71, 3.72, 0.94, 8.24, 0.51],
    [62.96, 0.016, 13.08, 1.75, 0.96, 3.2, 0.29],
    [79.24, 0.013, 15.19, 3.54, 0.89, 4.48, 0.78],
    [71.03, 0.014, 13.59, 1.94, 0.96, 3.14, 0.32],
    [55.5, 0.018, 11.04, 1.08, 0.98, 2.47, 0.17],
    [79.04, 0.013, 14.1, 2.33, 0.95, 3.12, 0.41],
    [56.04, 0.018, 16.1, 2, 0.97, 7.04, 0.31],
    [52.13, 0.019, 12.56, 2, 0.95, 4.7, 0.46],
    [46.5, 0.022, 21.03, 3.59, 0.94, 11.89, 0.52],
    [142.27, 0.007, 23.73, 7.71, 0.79, 7.78, 1.49],
    [126.78, 0.008, 24.63, 6.36, 0.85, 11.79, 1.22],
    [186.72, 0.005, 25.29, 8.09, 0.81, 6.3, 1.4],
    [135.48, 0.007, 31.15, 14.74, 0.63, 17.11, 2.74],
    [45.51, 0.022, 35.3, 14.25, 0.72, 43.88, 2.14],
    [40.4, 0.025, 38.41, 15.88, 0.7, 67.64, 2.46],
    [41.84, 0.024, 45.14, 18.16, 0.73, 60.87, 2.02],
    [29.07, 0.034, 29.91, 7.93, 0.86, 39.39, 1.17],
    [35.27, 0.028, 64.35, 36.32, 0.56, 130.37, 2.97],
    [50.82, 0.02, 6.78, 0.62, 0.98, 1.19, 0.16],
    [49.73, 0.02, 12.47, 1.75, 0.96, 3.68, 0.32],
    [52.97, 0.019, 11.2, 1.11, 0.98, 2.32, 0.17],
    [121.32, 0.008, 26.05, 10.72, 0.66, 15.99, 2.55],
    [64.6, 0.015, 8.92, 1.12, 0.97, 1.66, 0.27],
    [107.95, 0.009, 24.71, 7.76, 0.81, 10.1, 1.41],
    [80.04, 0.012, 53.79, 37.79, 0.43, 75.36, 4.24],
    [48.99, 0.02, 62.54, 38.39, 0.49, 132.28, 4.03],
    [56.43, 0.018, 52.87, 29.25, 0.55, 101.66, 3.71],
    [36.98, 0.027, 22.72, 3.87, 0.94, 16.31, 0.51],
    [71.08, 0.014, 30.09, 9.19, 0.83, 11.67, 1.15],
    [100.24, 0.01, 37.44, 11.43, 0.83, 12.8, 1.04],
    [64.06, 0.016, 15.03, 2.98, 0.92, 5.52, 0.62],
    [88.95, 0.011, 16.24, 3, 0.93, 3.13, 0.5],
    [94.74, 0.011, 24.54, 6.04, 0.88, 9.91, 0.9],
    [42.92, 0.023, 26.5, 4.25, 0.95, 14.41, 0.39],
    [66.53, 0.015, 38.27, 11.03, 0.85, 20.12, 1.03],
    [67.63, 0.015, 10.87, 9.6, 0.98, 2.09, 0.14],
    [51.28, 0.02, 33.54, 10.13, 0.83, 22.07, 1.23],
    [48.01, 0.021, 27.11, 4.97, 0.93, 13.31, 0.5],
    [78.18, 0.013, 33.76, 10.07, 0.84, 14.45, 1.13],
    [49.6, 0.02, 26.48, 6.17, 0.89, 13.78, 0.77],
    [72.19, 0.014, 22.45, 5.24, 0.9, 7.05, 0.73],
    [63.43, 0.016, 12.34, 1.41, 0.97, 3.77, 0.26],
    [141.18, 0.007, 28.77, 7.72, 0.87, 6.56, 0.89],
    [76, 0.013, 34.3, 12.21, 0.78, 16.69, 1.58],
    [70.7, 0.014, 21.97, 4.07, 0.93, 7.91, 0.55],
    [73.61, 0.014, 11.07, 1.22, 0.97, 2.2, 0.22],
    [66.86, 0.015, 26, 5.78, 0.91, 8.24, 0.66],
    [52.94, 0.019, 28.06, 4.68, 0.95, 11.66, 0.38],
    [88.28, 0.011, 38.97, 12.57, 0.82, 15.08, 1.17],
    [43.4, 0.023, 28.09, 5.88, 0.91, 19.63, 0.68],
    [51.39, 0.019, 26.88, 4.96, 0.93, 13.38, 0.53],
    [29.43, 0.034, 25.93, 4.3, 0.94, 18.12, 0.42],
    [44.63, 0.022, 22.27, 3.46, 0.95, 9.91, 0.38],
    [49.71, 0.02, 26.19, 4.46, 0.94, 12.66, 0.46],
    [30.33, 0.033, 12.54, 1.22, 0.98, 5.85, 0.19],
    [93.85, 0.011, 35.01, 11.2, 0.81, 22.11, 1.52],
    [57.93, 0.017, 36.87, 10.1, 0.86, 25.96, 1.1],
    [134.96, 0.007, 16.93, 5.31, 0.78, 6.05, 1.67],
    [185.9, 0.005, 13.5, 2.75, 0.87, 3.08, 1],
    [175.25, 0.006, 22.82, 8.44, 0.73, 7.78, 1.93],
    [158.54, 0.006, 24.59, 9.56, 0.67, 11.63, 2.49],
    [97.21, 0.01, 52.38, 32.68, 0.5, 50.39, 3.49],
    [24.67, 0.041, 29.81, 6.59, 0.9, 29.11, 0.67],
    [73.93, 0.014, 30.67, 11.55, 0.75, 18.97, 2.05],
    [62.68, 0.016, 35.87, 10.69, 0.84, 17.33, 1.07],
    [75.78, 0.013, 50.76, 20.91, 0.72, 46.91, 2.2],
    [61.88, 0.016, 48.92, 22.04, 0.67, 64.31, 2.71],
    [236.65, 0.004, 61.89, 48.77, 0.34, 59.74, 5.58],
    [39.63, 0.025, 34.97, 8.45, 0.89, 29.1, 0.85],
    [20.59, 0.049, 21.31, 2.8, 0.96, 15.93, 0.27],
    [33.3, 0.03, 29.64, 5.53, 0.93, 21.88, 0.52],
    [39.05, 0.026, 38.27, 10.38, 0.86, 33.74, 1],
    [64.28, 0.016, 27.5, 5.81, 0.91, 11.68, 0.67],
    [43, 0.023, 43.3, 14.4, 0.8, 42.16, 1.41],
    [146.49, 0.007, 21.24, 7.2, 0.76, 6.89, 1.82],
    [174.36, 0.006, 44.36, 26.08, 0.54, 18.97, 3.13],
    [218.79, 0.005, 24.82, 11.1, 0.67, 7.07, 2.33],
    [230.84, 0.004, 27.53, 13.29, 0.59, 9.03, 2.93],
    [253.15, 0.004, 25.45, 11.24, 0.65, 8.59, 2.61],
    [173.58, 0.006, 32.05, 18.51, 0.53, 12.96, 3.28],
    [65.25, 0.015, 30.74, 8.63, 0.86, 13.86, 1.01],
    [11.72, 0.085, 16.45, 1.35, 0.99, 15.49, 0.1],
    [28.03, 0.036, 33.75, 6.23, 0.93, 30.1, 0.42],
    [111.61, 0.009, 47.17, 20.11, 0.71, 18.68, 1.73],
    [24.37, 0.041, 19.88, 2.58, 0.97, 12.66, 0.27],
    [64.49, 0.016, 46.48, 14.9, 0.82, 31.56, 1.34],
    [44.86, 0.022, 52.47, 15.64, 0.84, 50.79, 1.09],
    [42.08, 0.024, 29.95, 4.3, 0.96, 15.76, 0.27],
    [145.26, 0.007, 37.97, 15.97, 0.71, 14.74, 2.32],
    [246.33, 0.004, 24.73, 13.14, 0.56, 7.16, 2.97],
    [135.77, 0.007, 43.46, 15.95, 0.77, 13.43, 1.36],
    [67.9, 0.015, 23.44, 4.27, 0.93, 7.61, 0.47],
    [50.2, 0.02, 30.57, 7.3, 0.89, 21.61, 0.91],
    [52.6, 0.019, 15.2, 2.54, 0.94, 5.04, 0.45],
    [43.57, 0.023, 40.63, 15.6, 0.75, 36.92, 1.7],
    [65.5, 0.015, 48.98, 20.17, 0.73, 31.98, 1.82],
    [76.14, 0.013, 10.74, 1.45, 0.96, 2.13, 0.31],
    [33.35, 0.03, 19.55, 2.91, 0.95, 11.87, 0.39],
    [65.65, 0.015, 42.96, 15.63, 0.77, 29.32, 1.52],
    [30.82, 0.032, 41.07, 17.7, 0.7, 48.78, 1.97],
    [27.17, 0.037, 23.29, 3.95, 0.94, 20.99, 0.53],
    [46.42, 0.022, 42.28, 13.17, 0.82, 41.29, 1.39],
    [28.62, 0.035, 28.23, 5.05, 0.94, 23.72, 0.5],
    [95.07, 0.011, 29.96, 9.35, 0.82, 11.63, 1.33],
    [48.8, 0.02, 12.28, 1.97, 0.95, 3.2, 0.4],
    [23.18, 0.043, 21.53, 2.82, 0.96, 14.93, 0.26],
    [63.24, 0.016, 39.88, 12.22, 0.83, 28.49, 1.31],
    [9.95, 0.1, 16.45, 1.51, 0.98, 17.78, 0.15],
    [90.75, 0.011, 39.53, 16.77, 0.7, 23.89, 2.18],
    [39.8, 0.025, 27.92, 5.7, 0.92, 22.06, 0.69],
    [39.63, 0.025, 38.68, 11.35, 0.84, 36.45, 1.21],
    [27.31, 0.037, 24.81, 4, 0.95, 19.14, 0.43],
    [57.53, 0.017, 43.03, 13.73, 0.82, 34.06, 1.39],
    [57.86, 0.017, 33.94, 9.09, 0.87, 17.13, 0.84],
    [29.2, 0.034, 17.17, 2.09, 0.97, 9.4, 0.27],
    [16.46, 0.061, 22.48, 3.01, 0.96, 22.61, 0.29],
    [53.01, 0.019, 34.93, 9.14, 0.87, 24.08, 1],
    [22.23, 0.045, 20.97, 3, 0.96, 17.19, 0.35],
    [55.16, 0.018, 23.73, 5.38, 0.89, 11.57, 0.83],
    [49.78, 0.02, 41.51, 13.67, 0.81, 32.59, 1.31],
    [19.42, 0.051, 12.09, 1.07, 0.98, 5.47, 0.12],
    [32.05, 0.031, 21.2, 3.66, 0.94, 11.56, 0.44],
    [68.06, 0.015, 46.54, 17.48, 0.76, 27.86, 1.42],
    [19.78, 0.051, 31.74, 6.53, 0.91, 40.27, 0.64],
    [22.29, 0.045, 36, 8.44, 0.89, 45.73, 0.78],
    [22.35, 0.045, 28.36, 5.17, 0.93, 28.06, 0.49],
    [110.01, 0.009, 75.72, 69.75, 0.28, 102.79, 5.78],
    [39.08, 0.026, 22.52, 4.32, 0.93, 11.69, 0.53],
    [40.21, 0.025, 21.01, 3.07, 0.96, 8.93, 0.31]
]

y = ["Меланома"] * 100 + ["Невус"] * 100 + ["Себорейный кератоз"] * 100

classifier = RandomForestClassifier()
classifier.fit(X, y)



# Создание окна
window = Tk()
window.title('Классификатор новообразований кожи')

# Создание фрейма для размещения кнопок
button_frame = Frame(window)
button_frame.pack()

# Создание кнопки выбора изображения
select_button = Button(button_frame, text='Выбрать изображение', command=select_image)
select_button.pack(side='left')

# Создание кнопки вычисления периметра и площади
calculate_button = Button(button_frame, text='Вычислить отношение периметр / площадь', command=calculate_melanoma_perimeter)
calculate_button.pack(side='left')

# Создание кнопки для вычисления контраста
contrast_button = Button(button_frame, text='Вычислить контраст', command=calculate_melanoma_contrast)
contrast_button.pack(side='left')

# Создание кнопки для вычисления среднего значения цвета
calculate_color_button = Button(button_frame, text='Вычислить среднюю яркость', command=calculate_average_color)
calculate_color_button.pack(side='left')

# Создание кнопки для вычисления однородности
homogeneity_button = Button(button_frame, text='Вычислить однородность', command=calculate_homogeneity)
homogeneity_button.pack(side='left')

# Создание кнопки для вычисления энергии
energy_button = Button(button_frame, text='Вычислить энергию', command=calculate_melanoma_energy)
energy_button.pack(side='left')

# Создание кнопки для вычисления текстурной энтропии
entropy_button = Button(button_frame, text='Вычислить энтроопию', command=calculate_melanoma_entropy)
entropy_button.pack(side='left')

# Создание метки для отображения отношения площади к периметру
ratio_label = Label(window)
ratio_label.pack()

# Создание метки для отображения отношения периметра к площади
perimeter_to_area_ratio_label = Label(window)
perimeter_to_area_ratio_label.pack()

# Создание метки для отображения контраста на меланоме
contrast_label = Label(window)
contrast_label.pack()

# Создание метки для отображения среднего значения цвета
average_color_label = Label(window)
average_color_label.pack()

# Создание метки для отображения однородности на меланоме
homogeneity_label = Label(window)
homogeneity_label.pack()

# Создание метки для отображения энергии на меланоме
energy_label = Label(window)
energy_label.pack()

# Создание метки для отображения текстурной энтропии меланомы
entropy_label = Label(window)
entropy_label.pack()

# Создание фрейма для размещения изображений
image_frame = Frame(window)
image_frame.pack()

# Создание метки для отображения первоначального изображения
image_label = Label(image_frame)
image_label.pack(side='left')

# Создание метки для отображения бинаризованного изображения меланомы
melanoma_label = Label(image_frame)
melanoma_label.pack(side='left')

# Создание метки для отображения изображения, по которому считается контраст
contrast_image_label = Label(image_frame)
contrast_image_label.pack(side='left')

# Создание кнопки для классификации
classify_button = Button(window, text="Классифицировать", command=classify_parameters)
classify_button.pack()

# Создание метки для отображения результата классификации
result_label = Label(window, text="")
result_label.pack()

# Запуск главного цикла окна
window.mainloop()
